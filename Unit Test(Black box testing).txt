Function : How much set of shares that worth in total 

Unit 1 : Calculate how much set of shares that worth in total 

* Input           : 
	Available number of shares in particular brands 
	Profit per single type of share 

* Expected output :
 
 Profit_share_type_x = number_of_share_x * profit_per_single_share_x
	
 
* Boundary value : 
	invalid values : <  0.00
	valid values   : >= 0.00

* JUnit proposal : 
	@Test
	profitPerShareTest (number of shares,profit per single share)
	@Test	
	totalProfit (profit_share_type ... ) 

* Error Guessing :
	- The calculation yield a wrong value when prices is out up date 
	- Number of shares < 0 
	- Profit_per_single_share < 0 


Unit 2 : Update prices 

* Input    : Live Index 
   	     Live Share

* Expected : Index not null
      	     Value (Buy and Sell) >= 0 
	     Point of decrement or increment 
		
	      e.g decrement :  -0.01 ; -0.1
		  increment : +0.3     	        (%)
	  ->  thus,
updated_value= current_value + (current_value * decrement_point/increment)
			

	   <Present as the table>

* Boundary value : 
	invalid values : index = null 
			 Buy <= 0 || Sell <= 0
						 			 
	valid values : index specified (e.g Groupon ; UK100 ; Oil)
		       value > 0     (e.g: Buy: 2.80 GBP)


* JUnit proposal :

	@Test
	indexTest()
	@Test
	valueTest()
	@BeforeClass
	void connect()
	@Test timeout = 15 minutes
	update()
	
* Error Guessing : 
	- Stopped internet connection on time when needing to update prices, thus missing the update function

	- No Internet connection 
	
	- Index is null/ no longer existing 

	- 

Unit 3 : Error checking 
	
* Input    : Internet connection(wifi, 3g, ..)
	     Data (index, value, profit, available deposit)
	     Feed (e.g )
* Expected : No messages for no errors (just present the interface with all of valid data)
	     There is an error in : 
		 internet connection - Show a dialog with the message : "No available internet connection" 			
		 Data : 
		   index is Null : (This index is no longer existing)
		   value <= 0    : (Bad data)
		   deposit is not enough : (Sorry you do not have enough money)
		   profit is invalid : (the profit is out up date)

		 Feed : (No data available)
* Boundary value : 
	invalid values : Valid data ; working internet connection
	valid values : invalid data ; no internet connection

* JUnit proposal :
		@Test
		errorCheckingTest();
		

Function 2 - Estimate how much portfolio is worth in total

Unit 1 : Display total of all stocks 
* Input    : all values numbers of all stocks (from internet ) 
* Expected : all values numbers of all stocks (with comma if it's >= 1000) 
	     
* Boundary value : 
	invalid values : any values numbers of stocks< 0 ; any indexes which are null.
	valid values : any values numbers of stocks >= 0 

* JUnit proposal :
		@Test
		portfolioWorthTest();
				

Unit 2 : Total must be in pounds 
* Input    : all worth total numbers 
* Expected : all worth total numbers (in pounds - with current trade ratio according to yahoo finance )
	     
* Boundary value : 
	invalid values : total values < 0 
	valid values : 	 total values >= 0 

* JUnit proposal :
		@Test
		totalInPoundsWorthTest();


Unit 3 : Error checking 
* Input    : Internet connection(wifi, 3g, ..)
	     Data (index, value, profit, available deposit)
	     Feed

* Expected : No messages for no errors (just present the interface with all of valid data)
	     There is an error in : 
		 internet connection - Show a dialog with the message : "No available internet connection" 			
		 Data : 
		   index is Null : (This index is no longer existing)
		   value <= 0    : (Bad data)

		 Feed : (No data available for .. )
	     
* Boundary value : 
	invalid values : Valid data ; working internet connection
	valid values : invalid data ; no internet connection

* JUnit proposal :
		@Test
		connectionTest()
		@Test
		nullIndexErrorTest()
		@Test
		valueErrorTest()
	
Unit 4 : Compare from previous friday

* Input    : The total worth value from current Friday 
	     The total worth value from previous Friday 

* Expected : The total worth value from current Friday 
	     The total worth value from previous Friday <present as table>

* Boundary value : 
	invalid values : total worth value < 0 
	valid values : total worth value >= 0 

* JUnit proposal :
	     
		@Test
		portfolioWorthTest();
		@Test
		capturePortfolioTest();
